#! /usr/bin/env runhaskell

-- pandoc-graphviz.hs
-- https://github.com/jgm/gitit/blob/master/plugins/Dot.hs

import           Data.ByteString.Lazy.UTF8 (fromString)
import           Data.Digest.Pure.SHA      (sha1, showDigest)
import           System.Exit               (ExitCode (..))
import           System.Process            (readProcessWithExitCode)
import           Text.Pandoc

transformBlock :: Block -> IO Block
transformBlock (CodeBlock (_, classes, namevals) contents) | "dot" `elem` classes = do
  let (name, outfile) =  case lookup "name" namevals of
                                Just fn   -> ([Str fn], fn ++ ".png")
                                Nothing   -> ([], uniqueName contents ++ ".png")
  (ec, _out, err) <- readProcessWithExitCode "dot" ["-Tpng", "-o", outfile] contents
  if ec == ExitSuccess
     then return $ Para [Image name (outfile, "")]
     else error $ "dot returned an error status: " ++ err
transformBlock x = return x

-- | Generate a unique filename given the file's contents.
uniqueName :: String -> String
uniqueName = showDigest . sha1 . fromString

main :: IO ()
main = getContents >>= bottomUpM transformBlock . readMarkdown def
                   >>= putStrLn . writeMarkdown def
