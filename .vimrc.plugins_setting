" ---------------------------------
"  grep.vim
" ---------------------------------
" :Gb <args> でGrepBufferする
command! -nargs=1 Gb :GrepBuffer <args>
" カーソル下の単語をGrepBufferする
nnoremap <C-g><C-b> :<C-u>GrepBuffer<Space><C-r><C-w><Enter>
nmap <Leader>g <ESC>:Gb
" ---------------------------------
"  vim-flake8 (python)
" ---------------------------------
autocmd BufWritePost *.py call Flake8()
" ---------------------------------
"  Tagbar
" ---------------------------------
nnoremap <silent> <leader>t :TagbarToggle<CR>
let g:tagbar_type_scala = {
    \ 'ctagstype' : 'Scala',
    \ 'kinds'     : [
        \ 'p:packages:1',
        \ 'V:values',
        \ 'v:variables',
        \ 'T:types',
        \ 't:traits',
        \ 'o:objects',
        \ 'a:aclasses',
        \ 'c:classes',
        \ 'r:cclasses',
        \ 'm:methods'
    \ ]
\ }
" ---------------------------------
"  vim-colors-solarized
" ---------------------------------
syntax enable
set background=dark
" solarized options
let g:solarized_termcolors = 256
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
colorscheme solarized
" ---------------------------------
"  vim-powerline
" ---------------------------------
let g:Powerline_symbols = 'fancy'
" ---------------------------------
"  unite.vim
" ---------------------------------
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    f [unite]

nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -direction=botright -buffer-name=files buffer file_mru bookmark file<CR>
nnoremap <silent> [unite]u  :<C-u>Unite -direction=botright buffer file_mru<CR>
nnoremap <silent> [unite]f  :<C-u>Unite -direction=botright -buffer-name=files file<CR>
nnoremap <silent> [unite]b  :<C-u>Unite -direction=botright buffer<CR>
nnoremap <silent> [unite]m  :<C-u>Unite -direction=botright file_mru<CR>
nnoremap <silent> [unite]d  :<C-u>UniteWithCurrentDir -direction=botright file<CR>
nnoremap <silent> [unite]t  :<C-u>Unite -direction=botright -immediately tab<CR>

nnoremap <silent> [unite]c  :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
" nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files -prompt=%\  buffer file_mru bookmark file<CR>
nnoremap <silent> [unite]r  :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> [unite]o  :<C-u>Unite outline<CR>
" nnoremap <silent> [unite]f  :<C-u>Unite -buffer-name=resume resume<CR>
" nnoremap <silent> [unite]d  :<C-u>Unite -buffer-name=files -default-action=lcd directory_mru<CR>
" nnoremap <silent> [unite]ma :<C-u>Unite mapping<CR>
" nnoremap <silent> [unite]me :<C-u>Unite output:message<CR>
" nnoremap  [unite]f  :<C-u>Unite source<CR>

nnoremap <silent> [unite]s  :<C-u>Unite -buffer-name=files -no-split jump_point file_point buffer_tab file_rec:! file file/new file_mru<CR>

" Start insert.
let g:unite_enable_start_insert = 1
"let g:unite_enable_short_source_names = 1

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
  " Overwrite settings.

  nmap <buffer> <ESC>      <Plug>(unite_exit)
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  imap <buffer> jj      <Plug>(unite_insert_leave)
  "imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)

  " ウィンドウを分割して開く
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

  " ウィンドウを縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')

  imap <buffer><expr> j unite#smart_map('j', '')
  imap <buffer> <TAB>   <Plug>(unite_select_next_line)
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
  imap <buffer> '     <Plug>(unite_quick_match_default_action)
  nmap <buffer> '     <Plug>(unite_quick_match_default_action)
  imap <buffer><expr> x unite#smart_map('x', "\<Plug>(unite_quick_match_choose_action)")
  nmap <buffer> x     <Plug>(unite_quick_match_choose_action)
  nmap <buffer> <C-z>     <Plug>(unite_toggle_transpose_window)
  imap <buffer> <C-z>     <Plug>(unite_toggle_transpose_window)
  imap <buffer> <C-y>     <Plug>(unite_narrowing_path)
  nmap <buffer> <C-y>     <Plug>(unite_narrowing_path)
  nmap <buffer> <C-j>     <Plug>(unite_toggle_auto_preview)
  nmap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
  imap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
  nnoremap <silent><buffer><expr> l unite#smart_map('l', unite#do_action('default'))

  let unite = unite#get_current_unite()
  if unite.buffer_name =~# '^search'
    nnoremap <silent><buffer><expr> r     unite#do_action('replace')
  else
    nnoremap <silent><buffer><expr> r     unite#do_action('rename')
  endif

  nnoremap <silent><buffer><expr> cd     unite#do_action('lcd')
  nnoremap <buffer><expr> S      unite#mappings#set_current_filters(
  \ empty(unite#mappings#get_current_filters()) ? ['sorter_reverse'] : [])
endfunction"}}}

let g:unite_source_file_mru_limit = 200
let g:unite_cursor_line_highlight = 'TabLineSel'
let g:unite_abbr_highlight = 'TabLine'

" For optimize.
let g:unite_source_file_mru_filename_format = ''

if executable('jvgrep')
  " For jvgrep.
  let g:unite_source_grep_command = 'jvgrep'
  let g:unite_source_grep_default_opts = '--exclude ''\.(git|svn|hg|bzr)'''
  let g:unite_source_grep_recursive_opt = '-R'
endif

" For ack.
if executable('ack-grep')
  " let g:unite_source_grep_command = 'ack-grep'
  " let g:unite_source_grep_default_opts = '--no-heading --no-color -a'
  " let g:unite_source_grep_recursive_opt = ''
endif

" Unite plugins
cnoremap UO Unite outline<Enter>
nnoremap <silent> [unite]o :<C-u>Unite -no-split outline<CR>
cnoremap UH Unite help<Enter>
nnoremap <silent> [unite]h :<C-u>Unite -no-split help<CR>
" unite-haddock
nnoremap <silent> [unite]ha :<C-u>UniteWithCursorWord -direction=botright -immediately haddock<CR>
" ghcmod-vim
nnoremap <silent> [unite]ho :<C-u>UniteWithCursorWord -direction=botright -immediately hoogle<CR>
nnoremap <silent> [unite]ht :<C-u>GhcModType<CR>
nnoremap <silent> [unite]hc :<C-u>GhcModTypeClear<CR>
" ghcmod-vim (保存後に非同期でチェックをする)
autocmd BufWritePost *.hs GhcModCheckAsync
" unite-haskellimport
nnoremap <silent> [unite]hi :<C-u>UniteWithCursorWord -direction=botright -immediately haskellimport<CR>
" unite-tag
autocmd BufEnter *
\   if empty(&buftype)
\|      nnoremap <buffer> <C-]> :<C-u>UniteWithCursorWord -immediately tag<CR>
\|  endif
" ---------------------------------
"  stylish-haskell
" ---------------------------------
nnoremap <silent> [unite]hs :<C-u>%!stylish-haskell<CR>
" ---------------------------------
"  vim2hs
" ---------------------------------
" let g:haskell_conceal_wide = 1
" let g:haskell_conceal              = 0
let g:haskell_conceal_enumerations = 0
